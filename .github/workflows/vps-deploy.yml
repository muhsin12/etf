name: Deploy to VPS

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build application
      run: npm run build
      env:
        NODE_ENV: production
        MONGODB_URI: ${{ secrets.MONGODB_URI }}
        ADMIN_EMAIL: ${{ secrets.ADMIN_EMAIL }}
        ADMIN_PASSWORD: ${{ secrets.ADMIN_PASSWORD }}
        JWT_SECRET: ${{ secrets.JWT_SECRET }}
        NEXT_PUBLIC_API_URL: ${{ secrets.NEXT_PUBLIC_API_URL }}

    - name: Deploy to VPS
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.VPS_HOST }}
        username: ${{ secrets.VPS_USERNAME }}
        key: ${{ secrets.VPS_SSH_KEY }}
        port: ${{ secrets.VPS_PORT || 22 }}
        script: |
          # Create application directory if it doesn't exist
          mkdir -p /home/gulf-restaurant/htdocs/www.gulf-restaurant.com
          mkdir -p /home/gulf-restaurant/logs
          mkdir -p /home/gulf-restaurant/backups
          
          # Navigate to application directory
          cd /home/gulf-restaurant/htdocs/www.gulf-restaurant.com
          
          # Stop the application first
          pm2 stop mmp-garage || true
          
          # Create backup if directory exists and has content
          if [ -d ".git" ] && [ "$(ls -A .)" ]; then
            echo "📦 Creating backup..."
            cp -r /home/gulf-restaurant/htdocs/www.gulf-restaurant.com /home/gulf-restaurant/backups/backup-$(date +%Y%m%d-%H%M%S) || true
          fi
          
          # Clean up existing directory for fresh deployment
          echo "🧹 Cleaning deployment directory..."
          rm -rf /home/gulf-restaurant/htdocs/www.gulf-restaurant.com/*
          rm -rf /home/gulf-restaurant/htdocs/www.gulf-restaurant.com/.[!.]*
          
          # Download repository as ZIP (no authentication required)
          echo "📥 Downloading repository..."
          curl -L -o /tmp/etf-deploy.zip https://github.com/muhsin12/etf/archive/refs/heads/main.zip
          
          # Extract the ZIP file
          echo "📦 Extracting repository..."
          cd /tmp
          unzip -q etf-deploy.zip
          
          # Copy files to deployment directory (the extracted folder will be named etf-main)
          echo "📋 Copying files to deployment directory..."
          cp -r /tmp/etf-main/* /home/gulf-restaurant/htdocs/www.gulf-restaurant.com/
          cp -r /tmp/etf-main/.[!.]* /home/gulf-restaurant/htdocs/www.gulf-restaurant.com/ 2>/dev/null || true
          
          # Clean up temporary files
          rm -rf /tmp/etf-deploy.zip /tmp/etf-main
          
          # Navigate back to application directory
          cd /home/gulf-restaurant/htdocs/www.gulf-restaurant.com
          
          # Verify files were copied correctly
          if [ ! -f "package.json" ]; then
            echo "❌ package.json not found after download! Deployment failed."
            echo "📋 Listing directory contents for debugging:"
            ls -la /home/gulf-restaurant/htdocs/www.gulf-restaurant.com/
            exit 1
          fi
          
          echo "✅ Repository downloaded and extracted successfully"
          
          # Install dependencies
          echo "📦 Installing dependencies..."
          if [ -f "package-lock.json" ]; then
            echo "Using npm ci..."
            npm ci
          else
            echo "Using npm install..."
            npm install
          fi
          
          # Set up Node.js version (ensure Node 18 LTS is available)
          if command -v nvm &> /dev/null; then
            echo "🔧 Setting up Node.js version..."
            nvm use 18 || nvm install 18
          fi
          
          # Install PM2 if not already installed
          if ! command -v pm2 &> /dev/null; then
            echo "🔧 Installing PM2..."
            npm install -g pm2
          fi
          
          # Create .env file if it doesn't exist
          if [ ! -f ".env" ]; then
            echo "🔧 Creating production environment file..."
            cat > .env << EOF
          NODE_ENV=production
          PORT=3001
          MONGODB_URI=${{ secrets.MONGODB_URI }}
          ADMIN_EMAIL=${{ secrets.ADMIN_EMAIL }}
          ADMIN_PASSWORD=${{ secrets.ADMIN_PASSWORD }}
          JWT_SECRET=${{ secrets.JWT_SECRET }}
          NEXT_PUBLIC_API_URL=${{ secrets.NEXT_PUBLIC_API_URL }}
          EOF
          fi
          
          # Build application
          if [ -f "package.json" ]; then
            npm run build
          else
            echo "❌ package.json not found! Repository may not have been pulled correctly."
            exit 1
          fi
          
          # Start/Restart application with PM2
          if [ -f "ecosystem.config.js" ]; then
            if pm2 list | grep -q "mmp-garage"; then
              pm2 restart mmp-garage
            else
              pm2 start ecosystem.config.js
            fi
          else
            echo "❌ ecosystem.config.js not found! Using fallback PM2 configuration."
            if pm2 list | grep -q "mmp-garage"; then
              pm2 restart mmp-garage
            else
              pm2 start npm --name "mmp-garage" -- start
            fi
          fi
          
          # Save PM2 configuration
          pm2 save
          
          # Setup PM2 startup script (run once)
          pm2 startup || true
          
          echo "✅ Deployment completed successfully!"
          echo "🌐 Application should be available at: https://www.gulf-restaurant.com"
          echo "📊 Check status with: pm2 status"

    - name: Health Check
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.VPS_HOST }}
        username: ${{ secrets.VPS_USERNAME }}
        key: ${{ secrets.VPS_SSH_KEY }}
        port: ${{ secrets.VPS_PORT || 22 }}
        script: |
          # Wait for application to start
          echo "⏳ Waiting for application to start..."
          sleep 15
          
          # Check if application is running
          if pm2 list | grep -q "mmp-garage.*online"; then
            echo "✅ Application is running successfully"
            
            # Check if port 3001 is listening
            if netstat -tuln | grep -q ":3001"; then
              echo "✅ Application is listening on port 3001"
            else
              echo "⚠️  Port 3001 not found, checking PM2 logs..."
              pm2 logs mmp-garage --lines 10
            fi
            
            # Test HTTP response (check both HTTP and HTTPS)
            echo "🔍 Testing HTTP connectivity..."
            if curl -f -s -m 10 http://localhost:3001 > /dev/null; then
              echo "✅ Local HTTP response successful"
            else
              echo "⚠️  Local HTTP test failed"
            fi
            
            if curl -f -s -m 10 https://www.gulf-restaurant.com > /dev/null; then
              echo "✅ External HTTPS response successful"
            else
              echo "⚠️  External HTTPS test failed - may need time for DNS/proxy setup"
            fi
            
            # Display PM2 status
            echo "📊 PM2 Status:"
            pm2 status
            
          else
            echo "❌ Application failed to start"
            echo "📋 PM2 Status:"
            pm2 status
            echo "📋 Recent logs:"
            pm2 logs mmp-garage --lines 20
            exit 1
          fi